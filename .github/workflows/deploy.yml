name: Deploy to Production Server

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          echo "Adding server to known_hosts..."
          ssh-keyscan -H 103.200.24.110 >> ~/.ssh/known_hosts || true

      - name: Create .env file
        run: |
          # Remove old .env file to ensure fresh configuration
          echo "Removing old .env file..."
          rm -f .env

          # Create test .env file with fixed values
          echo "Creating test .env file..."
          cat > .env << 'EOF'
          # Test .env file - Fixed values for testing
          DASHBOARD_HOST_NAME=https://noti.cudanso.net
          API_HOST_NAME=https://noti.cudanso.net
          WS_HOST_NAME=wss://noti.cudanso.net
          WORKER_HOST_NAME=https://noti.cudanso.net
          NODE_ENV=production
          NOVU_API_IMAGE=khoasoyoung/novu-api:1.1-production
          NOVU_WORKER_IMAGE=khoasoyoung/novu-worker:1.1-production
          NOVU_DASHBOARD_IMAGE=khoasoyoung/novu-dashboard:1.4-production
          NOVU_WS_IMAGE=khoasoyoung/novu-ws:1.1-production
          MONGO_PORT=27020
          REDIS_PORT=6380
          API_PORT=3000
          WORKER_PORT=3002
          DASHBOARD_PORT=4200
          WS_PORT=3003
          MONGO_INITDB_ROOT_USERNAME=root
          MONGO_INITDB_ROOT_PASSWORD=password123
          MONGO_INITDB_DATABASE=novu-db
          MONGO_URL=mongodb://root:password123@mongodb:27017/novu-db?authSource=admin
          JWT_SECRET=your-super-secret-jwt-key-change-this-in-production-must-be-long
          NOVU_SECRET_KEY=your-novu-secret-key-change-this-in-production-must-be-long
          STORE_ENCRYPTION_KEY=12345678901234567890123456789012
          STORAGE_SERVICE=LOCAL
          S3_BUCKET_NAME=
          S3_REGION=us-east-1
          AWS_ACCESS_KEY_ID=
          AWS_SECRET_ACCESS_KEY=
          VITE_AUTH_MODE=password
          FRONT_BASE_URL=https://noti.cudanso.net
          VITE_API_URL=https://noti.cudanso.net
          REACT_APP_API_URL=https://noti.cudanso.net
          VITE_WS_URL=wss://noti.cudanso.net
          REACT_APP_WS_URL=wss://noti.cudanso.net
          VITE_API_HOSTNAME=https://noti.cudanso.net
          VITE_WEBSOCKET_HOSTNAME=wss://noti.cudanso.net
          VITE_LEGACY_DASHBOARD_URL=https://noti.cudanso.net/legacy
          WORKER_DEFAULT_CONCURRENCY=10
          WORKER_DEFAULT_MAX_ATTEMPTS=3
          LOG_LEVEL=info
          NEW_RELIC_ENABLED=false
          SENTRY_DSN=
          VITE_SENTRY_DSN=
          SENDGRID_API_KEY=
          VITE_CLERK_PUBLISHABLE_KEY=
          VITE_NOVU_ENTERPRISE=false
          VITE_INTERCOM_APP_ID=
          REDIS_DB_INDEX=2
          VITE_SELF_HOSTED=true
          IS_SELF_HOSTED=true
          EOF

          # Debug: Show .env file was created
          echo "=== DEBUG: FILE .ENV ĐÃ TẠO ==="
          ls -la .env
          echo "=== DEBUG: NỘI DUNG FILE .ENV ==="
          head -10 .env

          # Original .env creation with secrets (commented out for testing)
          # cat > .env << EOF
          # Host
          DASHBOARD_HOST_NAME=${{ secrets.DASHBOARD_HOST_NAME }}
          API_HOST_NAME=${{ secrets.API_HOST_NAME }}
          WS_HOST_NAME=${{ secrets.WS_HOST_NAME }}
          WORKER_HOST_NAME=${{ secrets.WORKER_HOST_NAME }}

          # ENVIRONMENT SETTINGS
          NODE_ENV=production

          # =============================================================================
          # DOCKER IMAGES
          # =============================================================================
          NOVU_API_IMAGE=${{ secrets.NOVU_API_IMAGE }}
          NOVU_WORKER_IMAGE=${{ secrets.NOVU_WORKER_IMAGE }}
          NOVU_DASHBOARD_IMAGE=${{ secrets.NOVU_DASHBOARD_IMAGE }}
          NOVU_WS_IMAGE=${{ secrets.NOVU_WS_IMAGE }}

          # PORTS CONFIGURATION
          MONGO_PORT=${{ secrets.MONGO_PORT }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          API_PORT=${{ secrets.API_PORT }}
          WORKER_PORT=${{ secrets.WORKER_PORT }}
          DASHBOARD_PORT=${{ secrets.DASHBOARD_PORT }}
          WS_PORT=${{ secrets.WS_PORT }}

          # DATABASE CONFIGURATION
          MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
          MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
          MONGO_INITDB_DATABASE=${{ secrets.MONGO_INITDB_DATABASE }}
          MONGO_URL=${{ secrets.MONGO_URL }}

          # SECURITY CONFIGURATION
          # =============================================================================
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          NOVU_SECRET_KEY=${{ secrets.NOVU_SECRET_KEY }}
          STORE_ENCRYPTION_KEY=${{ secrets.STORE_ENCRYPTION_KEY }}

          # STORAGE CONFIGURATION
          STORAGE_SERVICE=${{ secrets.STORAGE_SERVICE }}
          S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
          S3_REGION=${{ secrets.S3_REGION }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}

          # Auth mode
          VITE_AUTH_MODE=password

          # FRONTEND CONFIGURATION
          FRONT_BASE_URL=\${DASHBOARD_HOST_NAME}:\${DASHBOARD_PORT}
          VITE_API_URL=\${API_HOST_NAME}:\${API_PORT}
          REACT_APP_API_URL=\${API_HOST_NAME}:\${API_PORT}
          VITE_WS_URL=ws://\${WS_HOST_NAME}:\${WS_PORT}
          REACT_APP_WS_URL=ws://\${WS_HOST_NAME}:\${WS_PORT}
          VITE_API_HOSTNAME=\${API_HOST_NAME}:\${API_PORT}
          VITE_WEBSOCKET_HOSTNAME=ws://\${WS_HOST_NAME}:\${WS_PORT}
          VITE_LEGACY_DASHBOARD_URL=\${DASHBOARD_HOST_NAME}:\${DASHBOARD_PORT}/legacy

          # WORKER CONFIGURATION
          WORKER_DEFAULT_CONCURRENCY=${{ secrets.WORKER_DEFAULT_CONCURRENCY }}
          WORKER_DEFAULT_MAX_ATTEMPTS=${{ secrets.WORKER_DEFAULT_MAX_ATTEMPTS }}

          # LOGGING CONFIGURATION
          LOG_LEVEL=${{ secrets.LOG_LEVEL }}

          # THIRD-PARTY SERVICES (OPTIONAL)
          NEW_RELIC_ENABLED=${{ secrets.NEW_RELIC_ENABLED }}
          SENTRY_DSN=${{ secrets.SENTRY_DSN }}
          VITE_SENTRY_DSN=${{ secrets.VITE_SENTRY_DSN }}

          # EMAIL PROVIDERS (OPTIONAL)
          SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}

          # AUTHENTICATION (OPTIONAL)
          VITE_CLERK_PUBLISHABLE_KEY=${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}

          # Enterprise features
          VITE_NOVU_ENTERPRISE=${{ secrets.VITE_NOVU_ENTERPRISE }}

          # Intercom configuration (optional - set to empty to disable)
          VITE_INTERCOM_APP_ID=${{ secrets.VITE_INTERCOM_APP_ID }}

          # ADVANCED CONFIGURATION
          REDIS_DB_INDEX=2

          # Self-hosted flag
          VITE_SELF_HOSTED=true
          IS_SELF_HOSTED=true
          EOF

      - name: Copy files to server
        run: |
          # Create a temporary directory with only necessary files
          mkdir -p temp_deploy

          # Copy specific files and directories (excluding .git)
          cp -r docker-compose.yml temp_deploy/
          cp -r docker-compose.prod.yml temp_deploy/
          cp -r nginx temp_deploy/
          cp -r .env temp_deploy/

          # Copy only necessary files
          scp -o StrictHostKeyChecking=no -r temp_deploy/* dev@103.200.24.110:/home/dev/novuservice/

      - name: Deploy on server
        run: |
          ssh -o StrictHostKeyChecking=no dev@103.200.24.110 << 'EOF'
            cd /home/dev/novuservice
            
            # Test: Check if .env file was copied successfully
            echo "=== KIỂM TRA FILE .ENV TRÊN SERVER ==="
            ls -la .env
            echo "=== NỘI DUNG FILE .ENV TRÊN SERVER ==="
            head -10 .env
            
            # Comment out Docker deployment for testing
            echo "=== DOCKER DEPLOYMENT COMMENTED FOR TESTING ==="
            # docker-compose -f docker-compose.prod.yml pull
            # docker-compose -f docker-compose.prod.yml down
            # docker-compose -f docker-compose.prod.yml up -d
            # sleep 30
            # docker-compose -f docker-compose.prod.yml ps
            
          EOF

      # - name: Health check
      #   run: |
      #     sleep 60
      #     curl -f https://noti.cudanso.net || exit 1
